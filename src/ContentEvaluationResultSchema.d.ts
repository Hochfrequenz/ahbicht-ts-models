/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ErrorMessage = string | null;
export type FormatConstraintFulfilled = boolean;
export type Id = string | null;
export type Packages = {
  /**
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "^\d+P$".
   */
  [k: string]: string;
} | null;
/**
 * Possible values to describe the state of a condition
 * in the condition_fulfilled attribute of the ConditionNodes.
 */
export type ConditionFulfilledValue = "FULFILLED" | "UNFULFILLED" | "UNKNOWN" | "NEUTRAL";

/**
 * A class that holds the results of a full content evaluation (meaning all hints, requirement constraints and
 * format constraints have been evaluated)
 */
export interface ContentEvaluationResult {
  format_constraints: FormatConstraints;
  hints?: Hints;
  id?: Id;
  packages?: Packages;
  requirement_constraints: RequirementConstraints;
  [k: string]: unknown;
}
export interface FormatConstraints {
  [k: string]: EvaluatedFormatConstraint;
}
/**
 * This class is the base class of all evaluated format constraints. They are used in the context of the
 * Mussfeldpr√ºfung after the format constraints are evaluated to see if the format constraint expression is
 * fulfilled or not.
 */
export interface EvaluatedFormatConstraint {
  error_message?: ErrorMessage;
  format_constraint_fulfilled: FormatConstraintFulfilled;
  [k: string]: unknown;
}
export interface Hints {
  [k: string]: string | null;
}
export interface RequirementConstraints {
  [k: string]: ConditionFulfilledValue;
}
